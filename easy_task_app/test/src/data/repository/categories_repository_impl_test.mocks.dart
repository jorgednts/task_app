// Mocks generated by Mockito 5.4.6 from annotations
// in easy_task_app/test/src/data/repository/categories_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:core/src/service/network/network_service.dart' as _i5;
import 'package:easy_task_app/data/remote/data_source/categories/categories_remote_data_source.dart'
    as _i2;
import 'package:easy_task_app/data/remote/model/task/easy_task_category_response.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CategoriesRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoriesRemoteDataSource extends _i1.Mock
    implements _i2.CategoriesRemoteDataSource {
  MockCategoriesRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.EasyTaskCategoryResponse>> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue: _i3.Future<List<_i4.EasyTaskCategoryResponse>>.value(
              <_i4.EasyTaskCategoryResponse>[],
            ),
          )
          as _i3.Future<List<_i4.EasyTaskCategoryResponse>>);

  @override
  _i3.Future<void> createCategory({required Map<String, dynamic>? params}) =>
      (super.noSuchMethod(
            Invocation.method(#createCategory, [], {#params: params}),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateCategory({required Map<String, dynamic>? params}) =>
      (super.noSuchMethod(
            Invocation.method(#updateCategory, [], {#params: params}),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteCategory({required String? categoryId}) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCategory, [], {#categoryId: categoryId}),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [NetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkService extends _i1.Mock implements _i5.NetworkService {
  MockNetworkService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> checkInternetConnection() =>
      (super.noSuchMethod(
            Invocation.method(#checkInternetConnection, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}
