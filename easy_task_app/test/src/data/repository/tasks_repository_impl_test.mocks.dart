// Mocks generated by Mockito 5.4.6 from annotations
// in easy_task_app/test/src/data/repository/tasks_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:core/src/service/network/network_service.dart' as _i10;
import 'package:easy_task_app/data/remote/data_source/tasks/media_remote_data_source.dart'
    as _i6;
import 'package:easy_task_app/data/remote/data_source/tasks/tasks_remote_data_source.dart'
    as _i3;
import 'package:easy_task_app/data/remote/model/task/easy_task_media_item_response.dart'
    as _i8;
import 'package:easy_task_app/data/remote/model/task/easy_task_response.dart'
    as _i2;
import 'package:easy_task_app/domain/model/tasks/params/delete_media_params.dart'
    as _i7;
import 'package:easy_task_app/domain/model/tasks/params/get_tasks_filter_params.dart'
    as _i5;
import 'package:easy_task_app/domain/model/tasks/params/upload_media_params.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEasyTaskResponse_0 extends _i1.SmartFake
    implements _i2.EasyTaskResponse {
  _FakeEasyTaskResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TasksRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksRemoteDataSource extends _i1.Mock
    implements _i3.TasksRemoteDataSource {
  MockTasksRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.EasyTaskResponse>> getTasks({
    required _i5.GetTasksFiltersParams? filters,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTasks, [], {#filters: filters}),
            returnValue: _i4.Future<List<_i2.EasyTaskResponse>>.value(
              <_i2.EasyTaskResponse>[],
            ),
          )
          as _i4.Future<List<_i2.EasyTaskResponse>>);

  @override
  _i4.Future<_i2.EasyTaskResponse> createTask({
    required Map<String, dynamic>? params,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createTask, [], {#params: params}),
            returnValue: _i4.Future<_i2.EasyTaskResponse>.value(
              _FakeEasyTaskResponse_0(
                this,
                Invocation.method(#createTask, [], {#params: params}),
              ),
            ),
          )
          as _i4.Future<_i2.EasyTaskResponse>);

  @override
  _i4.Future<void> updateTask({required Map<String, dynamic>? params}) =>
      (super.noSuchMethod(
            Invocation.method(#updateTask, [], {#params: params}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTask({required String? id}) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTask, [], {#id: id}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.EasyTaskResponse> getTaskById({required String? taskId}) =>
      (super.noSuchMethod(
            Invocation.method(#getTaskById, [], {#taskId: taskId}),
            returnValue: _i4.Future<_i2.EasyTaskResponse>.value(
              _FakeEasyTaskResponse_0(
                this,
                Invocation.method(#getTaskById, [], {#taskId: taskId}),
              ),
            ),
          )
          as _i4.Future<_i2.EasyTaskResponse>);
}

/// A class which mocks [MediaRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMediaRemoteDataSource extends _i1.Mock
    implements _i6.MediaRemoteDataSource {
  MockMediaRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> deleteMediaFile({required _i7.DeleteMediaParams? params}) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMediaFile, [], {#params: params}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i8.EasyTaskMediaItemResponse>> uploadMediaFiles({
    required _i9.UploadMediaParams? params,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#uploadMediaFiles, [], {#params: params}),
            returnValue: _i4.Future<List<_i8.EasyTaskMediaItemResponse>>.value(
              <_i8.EasyTaskMediaItemResponse>[],
            ),
          )
          as _i4.Future<List<_i8.EasyTaskMediaItemResponse>>);
}

/// A class which mocks [NetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkService extends _i1.Mock implements _i10.NetworkService {
  MockNetworkService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> checkInternetConnection() =>
      (super.noSuchMethod(
            Invocation.method(#checkInternetConnection, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
