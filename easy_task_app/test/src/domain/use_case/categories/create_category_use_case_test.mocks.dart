// Mocks generated by Mockito 5.4.6 from annotations
// in easy_task_app/test/src/domain/use_case/categories/create_category_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:core/core.dart' as _i4;
import 'package:easy_task_app/domain/model/tasks/easy_task_category_model.dart'
    as _i5;
import 'package:easy_task_app/domain/model/tasks/params/create_category_param.dart'
    as _i7;
import 'package:easy_task_app/domain/model/tasks/params/edit_category_params.dart'
    as _i8;
import 'package:easy_task_app/domain/repository/categories_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CategoriesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoriesRepository extends _i1.Mock
    implements _i2.CategoriesRepository {
  MockCategoriesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<List<_i5.EasyTaskCategoryModel>>> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue:
                _i3.Future<_i4.Result<List<_i5.EasyTaskCategoryModel>>>.value(
                  _i6.dummyValue<_i4.Result<List<_i5.EasyTaskCategoryModel>>>(
                    this,
                    Invocation.method(#getCategories, []),
                  ),
                ),
          )
          as _i3.Future<_i4.Result<List<_i5.EasyTaskCategoryModel>>>);

  @override
  _i3.Future<_i4.Result<void>> createCategory({
    required _i7.CreateCategoryParams? params,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createCategory, [], {#params: params}),
            returnValue: _i3.Future<_i4.Result<void>>.value(
              _i6.dummyValue<_i4.Result<void>>(
                this,
                Invocation.method(#createCategory, [], {#params: params}),
              ),
            ),
          )
          as _i3.Future<_i4.Result<void>>);

  @override
  _i3.Future<_i4.Result<void>> updateCategory({
    required _i8.EditCategoryParams? params,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateCategory, [], {#params: params}),
            returnValue: _i3.Future<_i4.Result<void>>.value(
              _i6.dummyValue<_i4.Result<void>>(
                this,
                Invocation.method(#updateCategory, [], {#params: params}),
              ),
            ),
          )
          as _i3.Future<_i4.Result<void>>);

  @override
  _i3.Future<_i4.Result<void>> deleteCategory({required String? categoryId}) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCategory, [], {#categoryId: categoryId}),
            returnValue: _i3.Future<_i4.Result<void>>.value(
              _i6.dummyValue<_i4.Result<void>>(
                this,
                Invocation.method(#deleteCategory, [], {
                  #categoryId: categoryId,
                }),
              ),
            ),
          )
          as _i3.Future<_i4.Result<void>>);
}
