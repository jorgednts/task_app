// Mocks generated by Mockito 5.4.6 from annotations
// in easy_task_app/test/src/domain/use_case/auth/get_current_user_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:core/core.dart' as _i5;
import 'package:easy_task_app/data/remote/model/user/sign_in_params.dart'
    as _i9;
import 'package:easy_task_app/domain/model/user/easy_task_user_model.dart'
    as _i6;
import 'package:easy_task_app/domain/model/user/register_user_params.dart'
    as _i7;
import 'package:easy_task_app/domain/repository/auth_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:supabase_flutter/supabase_flutter.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i2.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.AuthState> get authStateChanges =>
      (super.noSuchMethod(
            Invocation.getter(#authStateChanges),
            returnValue: _i3.Stream<_i4.AuthState>.empty(),
          )
          as _i3.Stream<_i4.AuthState>);

  @override
  _i3.Future<_i5.Result<_i6.EasyTaskUserModel>> registerUser({
    required _i7.RegisterUserParams? registerParams,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#registerUser, [], {
              #registerParams: registerParams,
            }),
            returnValue: _i3.Future<_i5.Result<_i6.EasyTaskUserModel>>.value(
              _i8.dummyValue<_i5.Result<_i6.EasyTaskUserModel>>(
                this,
                Invocation.method(#registerUser, [], {
                  #registerParams: registerParams,
                }),
              ),
            ),
          )
          as _i3.Future<_i5.Result<_i6.EasyTaskUserModel>>);

  @override
  _i3.Future<_i5.Result<_i6.EasyTaskUserModel?>> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i3.Future<_i5.Result<_i6.EasyTaskUserModel?>>.value(
              _i8.dummyValue<_i5.Result<_i6.EasyTaskUserModel?>>(
                this,
                Invocation.method(#getCurrentUser, []),
              ),
            ),
          )
          as _i3.Future<_i5.Result<_i6.EasyTaskUserModel?>>);

  @override
  _i3.Future<_i5.Result<_i6.EasyTaskUserModel>> signInUser({
    required _i9.SignInParams? signInParams,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInUser, [], {#signInParams: signInParams}),
            returnValue: _i3.Future<_i5.Result<_i6.EasyTaskUserModel>>.value(
              _i8.dummyValue<_i5.Result<_i6.EasyTaskUserModel>>(
                this,
                Invocation.method(#signInUser, [], {
                  #signInParams: signInParams,
                }),
              ),
            ),
          )
          as _i3.Future<_i5.Result<_i6.EasyTaskUserModel>>);

  @override
  _i3.Future<_i5.Result<void>> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i3.Future<_i5.Result<void>>.value(
              _i8.dummyValue<_i5.Result<void>>(
                this,
                Invocation.method(#signOut, []),
              ),
            ),
          )
          as _i3.Future<_i5.Result<void>>);
}
